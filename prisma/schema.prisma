generator client {
  provider = "prisma-client-js"
}

// datasource db {
//   provider  = "postgresql"
//   url       = env("DATABASE_URL")
//   directUrl = env("DIRECT_URL")
// }

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Auth Models
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  // Relations
  accounts Account[]
  sessions Session[]
  bentos   Bento[]

  settings UserSettings?

  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  userSettingsId String?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model UserSettings {
  id                String  @id @default(cuid())
  openLinksInNewTab Boolean @default(true)

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

// Bento Models
model Bento {
  id          String      @id @default(cuid())
  slug        String
  title       String
  icon        String      @default("")
  description String      @default("")
  ownerId     String
  owner       User        @relation(fields: [ownerId], references: [id])
  links       BentoLink[]

  // createdAt DateTime? @default(now())
  // updatedAt DateTime? @updatedAt

  @@unique([slug, ownerId])
}

model BentoLink {
  id          String @id @default(cuid())
  title       String
  url         String
  icon        String @default("mdi:link")
  description String @default("")
  bentoId     String
  bento       Bento  @relation(fields: [bentoId], references: [id])

  // createdAt DateTime? @default(now())
  // updatedAt DateTime? @updatedAt
}
